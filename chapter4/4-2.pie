#lang pie


;; Exercise 4.2
;;
;; Define a function called compose that takes (in addition to the type
;; arguments A, B, C) an argument of type (-> A B) and an argument of
;; type (-> B C) that and evaluates to a value of type (-> A C), the function
;; composition of the arguments.

(claim compose
  (Pi ((A U) (B U) (C U))
    (-> (-> A B) (-> B C) (-> A C))))
(define compose
  (lambda (A B C)
    (lambda (f g)
      (lambda (a)
        (g (f a))))))

(compose Nat Nat Nat (lambda (x) (add1 x)) (lambda (x) (add1 (add1 x))) (the Nat 4))
