#lang pie

;; Exercises on Absurd from Chapter 15 of The Little Typer

(claim +
  (-> Nat Nat
    Nat))

(define +
  (λ (a b)
    (rec-Nat a
      b
      (λ (_ b+a-k)
        (add1 b+a-k)))))

(claim double
  (-> Nat
    Nat))

(define double
  (λ (n)
    (rec-Nat n
      0
      (λ (_ n+n-2)
        (+ 2 n+n-2)))))

(claim Even
  (-> Nat
    U))

(define Even
  (λ (n)
    (Σ ([half Nat])
      (= Nat n (double half)))))

(claim Odd
  (-> Nat
    U))

(define Odd
  (λ (n)
    (Σ ([haf Nat])
      (= Nat n (add1 (double haf))))))

(claim <=
  (-> Nat Nat
    U))

(define <=
  (λ (a b)
    (Σ ([k Nat])
      (= Nat (+ k a) b))))

;; The following is not required for the statement of exercises
;; but will be required in some solutions.

(claim =consequence
  (-> Nat Nat
    U))

(define =consequence
  (λ (n j)
    (which-Nat n
      (which-Nat j
        Trivial
        (λ (j-1)
          Absurd))
      (λ (n-1)
        (which-Nat j
          Absurd
          (λ (j-1)
            (= Nat n-1 j-1)))))))

(claim =consequence-same
  (Π ([n Nat])
    (=consequence n n)))

(define =consequence-same
  (λ (n)
    (ind-Nat n
      (λ (k)
        (=consequence k k))
      sole
      (λ (n-1 =consequence-n-1)
        (same n-1)))))

(claim use-Nat=
  (Π ([n Nat]
      [j Nat])
    (-> (= Nat n j)
      (=consequence n j))))

(define use-Nat=
  (λ (n j)
    (λ (n=j)
      (replace n=j
        (λ (k)
          (=consequence n k))
        (=consequence-same n)))))

(claim zero-not-add1
  (Π ([n Nat])
    (-> (= Nat zero (add1 n))
      Absurd)))

(define zero-not-add1
  (λ (n)
    (use-Nat= zero (add1 n))))

(claim sub1=
  (Pi ([n Nat] [j Nat])
    (-> (= Nat (add1 n) (add1 j)) (= Nat n j))))
(define sub1=
  (lambda (n j) (use-Nat= (add1 n) (add1 j))))

;; Exercise 15.1
;;
;; State and prove that 3 is not less than 1.


(claim add1+=+add1
  (Pi [(n Nat) (j Nat)]
    (= Nat (add1 (+ n j)) (+ n (add1 j)))))
(define add1+=+add1
  (lambda (n j)
    (ind-Nat n
      (lambda (k)  (= Nat (add1 (+ k j)) (+ k (add1 j))))
      (same (add1 j))
      (lambda (n-1)
        (lambda (p_n-1)
          (cong p_n-1 (+ 1)))))))

(claim notk+1<=0
  (Pi ([k Nat])
    (-> (<= (add1 k) 0) Absurd)))
(define notk+1<=0
  (lambda (k)
    (lambda (k+1<=0)
      (use-Nat= (add1 (+ (car k+1<=0) k)) zero
        (trans
          (add1+=+add1 (car k+1<=0) k)
          (cdr k+1<=0)
          )
        )
      )
    )
  )

(claim not<=
  (Pi ([n Nat] [k Nat])
    (-> (<= (+ n (add1 k)) n) Absurd)))
(define not<=
  (lambda (n k)
    (ind-Nat n
      (lambda (i) (-> (<= (+ i (add1 k)) i) Absurd))
      (notk+1<=0 k)
      (lambda (n-1 not<=n-1)
        (lambda (n+1+k+1<=n+1)
          (not<=n-1
            (cons (car n+1+k+1<=n+1)
              (sub1= (+ (car n+1+k+1<=n+1) (+ n-1 (add1 k))) n-1
                (trans
                  (add1+=+add1 (car n+1+k+1<=n+1) (+ n-1 (add1 k)))
                  (cdr n+1+k+1<=n+1)
                  )
                )
              )
            )
          )
        ))))

(claim not-3<=1
  (-> (<= 3 1)
    Absurd))
(define not-3<=1
  (not<= 1 1))



;; Exercise 15.2
;;
;; State and prove that any natural number is not equal to its successor.

(claim n<>Sn
  (Π ([n Nat])
    (-> (= Nat n (add1 n))
      Absurd)))
(define n<>Sn
  (lambda (n)
    (ind-Nat n
      (lambda (k) (-> (= Nat k (add1 k)) Absurd))
      (use-Nat= zero 1)
      (lambda (n-1 n-1<>Sn-1)
        (lambda (n=n+1)
          (n-1<>Sn-1
            (sub1= n-1 (add1 n-1) n=n+1)
            )
          )))))

;; Exercise 15.3
;;
;; State and prove that for every Nat n, the successor of n is not less
;; than or equal to n.

(claim Sn-not<=-n
  (Π ([n Nat])
    (-> (<= (add1 n) n)
      Absurd)))
(define Sn-not<=-n
  (lambda (n)
    (ind-Nat n
      (lambda (i) (-> (<= (add1 i) i) Absurd))
      (lambda (1<=0)
        (use-Nat= (add1 (+ (car 1<=0) zero)) zero
          (trans
            (add1+=+add1 (car 1<=0) zero)
            (cdr 1<=0)
            )
          )
        )
      (lambda (n-1 Sn-1Not<=n-1)
        (lambda (n<=n+1)
          (Sn-1Not<=n-1
            (cons (car n<=n+1)
              (sub1= (+ (car n<=n+1) (add1 n-1)) n-1
                (trans
                  (add1+=+add1 (car n<=n+1) (add1 n-1))
                  (cdr n<=n+1)
                  )
                )
              )))))))

;; Exercise 15.4
;;
;; State and prove that 1 is not Even.

(claim odd-not-even
  (Pi ([n Nat])
    (-> (Odd n) t(Even n) Absurd)))
(define odd-not-even
  (lambda (n oddd)
    TODO
      ))
      
(claim not1=double
  (Pi ([n Nat])
    (-> (= Nat 1 (double n)) Absurd)))
(define not1=double
  (lambda (n)
    (ind-Nat n
      (lambda (k) (-> (= Nat 1 (double k)) Absurd))
      (lambda (1=0) (zero-not-add1 0 (symm 1=0)))
      (lambda (k _)
        (lambda (1=doublek+1)
          (zero-not-add1 (double k) (sub1= 0 (add1 (double k)) 1=doublek+1))
        )))))

(claim one-not-Even
  (-> (Even 1)
    Absurd))
(define one-not-Even
  (lambda (1even)
    (not1=double (car 1even) (cdr 1even))))

    
